<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惠嘉伟的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hellojackhui.github.io/"/>
  <updated>2020-03-30T01:23:06.711Z</updated>
  <id>http://hellojackhui.github.io/</id>
  
  <author>
    <name>Hellojackhui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读《http灵魂之问》总结</title>
    <link href="http://hellojackhui.github.io/2020/03/27/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%8Ahttp%E7%81%B5%E9%AD%82%E4%B9%8B%E9%97%AE%E3%80%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://hellojackhui.github.io/2020/03/27/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%8Ahttp%E7%81%B5%E9%AD%82%E4%B9%8B%E9%97%AE%E3%80%8B%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-27T00:45:21.407Z</published>
    <updated>2020-03-30T01:23:06.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片文档对神三元的《http灵魂之问》中问题的分析与理解。</p></blockquote><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://user-gold-cdn.xitu.io/2020/3/23/17104ea1fdee5669?imageslim" alt="http灵魂之问图谱"></p><h3 id="001-HTTP-报文结构是怎样的？"><a href="#001-HTTP-报文结构是怎样的？" class="headerlink" title="001. HTTP 报文结构是怎样的？"></a>001. HTTP 报文结构是怎样的？</h3><p>http报文分为请求报文和响应报文</p><p>请求报文主要分请求行，请求头，空行和请求体。<br>在请求行中主要包括<code>请求类型，请求路径，请求协议</code>。<br>请求头包含有关获取的数据格式，缓存相关，跨域，ua等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST www.baidu.com HTTP&#x2F;1.1</span><br><span class="line">content-type: text&#x2F;plain</span><br><span class="line">Accept-length: 2222</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   name: jackhui</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应报文主要分响应行，响应头，空行, 响应体<br>在响应行中主要包括<code>协议版本，状态码，状态名称</code>。<br>响应头包含有关获取的数据格式，缓存相关，跨域，ua等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 ok</span><br><span class="line">Content-Type: text&#x2F;plain; charset&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">Etag: 1111111</span><br></pre></td></tr></table></figure><h4 id="空行的作用"><a href="#空行的作用" class="headerlink" title="空行的作用"></a>空行的作用</h4><p>空行的作用是区分响应头和响应体，如果在响应头中添加空行，那么空行后的内容会被认为是响应体。</p><h3 id="002-如何理解-HTTP-的请求方法？"><a href="#002-如何理解-HTTP-的请求方法？" class="headerlink" title="002.如何理解 HTTP 的请求方法？"></a>002.如何理解 HTTP 的请求方法？</h3><p>个人对http请求方法联想到的知识内容</p><blockquote><p>请求方法有哪些？ 什么作用？ 有什么区别？ 用途有哪些？ 预检请求的条件。</p></blockquote><h4 id="请求方法和作用"><a href="#请求方法和作用" class="headerlink" title="请求方法和作用"></a>请求方法和作用</h4><table><thead><tr><th>请求方法</th><th>作用</th></tr></thead><tbody><tr><td>get</td><td>获取资源</td></tr><tr><td>post</td><td>上传数据</td></tr><tr><td>head</td><td>获取数据元信息</td></tr><tr><td>put</td><td>提交数据</td></tr><tr><td>delete</td><td>删除数据</td></tr><tr><td>options</td><td>预检请求</td></tr><tr><td>connect</td><td>用于代理服务器的隧道连接</td></tr><tr><td>trace</td><td>跟踪请求</td></tr></tbody></table><h4 id="GET-和-POST-有什么区别？"><a href="#GET-和-POST-有什么区别？" class="headerlink" title="GET 和 POST 有什么区别？"></a>GET 和 POST 有什么区别？</h4><ul><li>从<code>缓存</code>的角度，get请求会被浏览器自动缓存。post需要进行设置才会缓存</li><li>从<code>浏览器</code>的角度，浏览器回退时get请求不会触发，post会</li><li>从<code>浏览器</code>的角度，get请求参数会存入浏览器的历史记录中，post不会</li><li>从<code>参数</code>的角度，get请求的传参会与请求的url进行拼接，且有长度限制，post请求传参存入请求体中，长度不限</li><li>从<code>安全</code>的角度，get请求的安全性不如post请求</li><li>从<code>编码</code>的角度，get请求只能使用url编码，post支持多种编码方式</li><li>从<code>幂等</code>的角度，get请求具有<code>幂等性</code>, post没有 (<code>幂等</code>表示执行相同的操作，结果也是相同的)</li><li>从<code>TCP</code>的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。(火狐浏览器除外，它的 POST 请求只发一个 TCP 包)</li></ul><h3 id="003-如何理解-URI？"><a href="#003-如何理解-URI？" class="headerlink" title="003: 如何理解 URI？"></a>003: 如何理解 URI？</h3><p>URI, 全称为(Uniform Resource Identifier), 也就是<code>统一资源标识符</code>，它的作用很简单，就是区分互联网上不同的资源。</p><p>URI的结构：协议，域名，端口，路径，查询参数，锚点</p><p>URI<code>只支持ascII编码</code>。同时，URI 引入了编码机制，将所有非 ASCII 码字符和界定符转为<code>十六进制字节值</code>，然后在前面加个%。</p><h3 id="004-如何理解-HTTP-状态码？"><a href="#004-如何理解-HTTP-状态码？" class="headerlink" title="004: 如何理解 HTTP 状态码？"></a>004: 如何理解 HTTP 状态码？</h3><p>http状态码分为5类：</p><ul><li>1xx: 表示目前是协议处理的中间状态，还需要后续操作。</li><li>2xx: 表示成功状态。</li><li>3xx: 重定向状态，资源位置发生变动，需要重新请求。</li><li>4xx: 请求报文有误。</li><li>5xx: 服务器端发生错误。</li></ul><p>状态码|说明<br>101|切换协议，在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101。<br>200|请求成功<br>204|请求成功，<code>响应头后没有 body 数据</code><br>206|部分内容，使用于HTTP 分块下载和断点续传<br>301|永久重定向，例如：http-&gt;https且旧节点不用，使用301，但是<code>浏览器会对内容做缓存优化</code><br>302|临时重定向，例如：http-&gt;https且旧节点暂时不用，使用302，<code>浏览器不会对内容做缓存优化</code><br>304|资源未修改，浏览器缓存机制使用，不需要服务端返回数据，直接使用缓存内容<br>307|从不同的url响应请求<br>400|错误请求，请求内容出错<br>401|未授权，请求未授权<br>403|服务器禁止访问<br>404|未找到请求路径，资源未找到<br>405|请求类型不允许<br>406|资源无法满足客户端的条件<br>408|请求超时<br>500|服务器出错<br>502|服务端网关有问题<br>503|服务器当前很忙，暂时无法响应服务</p><h3 id="005-简要概括一下-HTTP-的特点？HTTP-有哪些缺点？"><a href="#005-简要概括一下-HTTP-的特点？HTTP-有哪些缺点？" class="headerlink" title="005: 简要概括一下 HTTP 的特点？HTTP 有哪些缺点？"></a>005: 简要概括一下 HTTP 的特点？HTTP 有哪些缺点？</h3><p>http 超文本传输协议，是一种灵活可拓展，可靠传输，无状态的应用层协议。</p><ul><li>灵活可拓展，在于语法的灵活性和请求数据类型的灵活性</li><li>可靠传输，基于tcp作为传输层控制</li><li>无状态，每一个http请求独立</li><li>一个发送，一个接收的传输方式</li></ul><p>缺点：</p><ol><li>无状态，需要客户端在每次请求发送认证的信息</li><li>明文传输</li><li>队头阻塞问题。当 http 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的队头阻塞问题。接下来会有一小节讨论这个问题。</li></ol><h3 id="006-对-Accept-系列字段了解多少？"><a href="#006-对-Accept-系列字段了解多少？" class="headerlink" title="006: 对 Accept 系列字段了解多少？"></a>006: 对 Accept 系列字段了解多少？</h3><p>accpet字段用于向服务端表明接收方支持的<code>数据格式、压缩方式、支持语言和字符集。</code></p><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><p>HTTP 从MIME type取了一部分来标记报文 body 部分的数据类型，这些类型体现在Content-Type这个字段，当然这是针对于发送端而言，接收端想要收到特定类型的数据，也可以用Accept字段。</p><p>取值包括以下范围：</p><ul><li>text： text/html, text/plain, text/css 等</li><li>image: image/gif, image/jpeg, image/png 等</li><li>audio/video: audio/mpeg, video/mp4 等</li><li>application: application/json, application/javascript, application/pdf, application/octet-stream</li></ul><h4 id="压缩方式"><a href="#压缩方式" class="headerlink" title="压缩方式"></a>压缩方式</h4><p>当然一般这些数据都是会进行编码压缩的，采取什么样的压缩方式就体现在了发送方的Content-Encoding字段上，接收什么样的压缩方式体现在了接受方的Accept-Encoding字段上。</p><ul><li>gzip: 当今最流行的压缩格式</li><li>deflate: 另外一种著名的压缩格式</li><li>br: 一种专门为 HTTP 发明的压缩算法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Encoding: gizp</span><br></pre></td></tr></table></figure><h4 id="支持语言"><a href="#支持语言" class="headerlink" title="支持语言"></a>支持语言</h4><p>对于发送方而言，还有一个Content-Language字段，在需要实现国际化的方案当中，可以用来指定支持的语言，<br>在接受方对应的字段为Accept-Language</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Language: zh-CN, zh, en</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Language: zh-CN, zh, en</span><br></pre></td></tr></table></figure><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>接收端对应为Accept-Charset，指定可以接受的字符集，而在发送端并没有对应的Content-Charset, 而是直接放在了Content-Type中，以charset属性指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line">Accept-Charset: charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><h3 id="007-对于定长和不定长的数据，HTTP-是怎么传输的？"><a href="#007-对于定长和不定长的数据，HTTP-是怎么传输的？" class="headerlink" title="007: 对于定长和不定长的数据，HTTP 是怎么传输的？"></a>007: 对于定长和不定长的数据，HTTP 是怎么传输的？</h3><p>对于定长的数据，使用<em>content-type</em>确定数据的长度，对于不定长的数据，需要使用<em>transfer-encoding: chunked</em>，表示分块传输数据，设置这个字段有两个效果：</p><ul><li>content-type会被忽略</li><li>通过长链接传输数据</li></ul><h3 id="008-HTTP-如何处理大文件的传输？"><a href="#008-HTTP-如何处理大文件的传输？" class="headerlink" title="008: HTTP 如何处理大文件的传输？"></a>008: HTTP 如何处理大文件的传输？</h3><p>http大文件传输主要采用分块传输，其中在http请求头中可以进行相应的设置。采取了<em>范围请求</em>的解决方案，允许客户端仅仅请求一个资源的一部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 响应头,用来告知客户端这边是支持范围请求的。</span><br><span class="line">Accept-Ranges: none</span><br><span class="line">// 相应的，在请求时可以通过*content-range设置为范围请求*</span><br><span class="line">Content-Range*, 而这个字段的格式根据请求头中Range字段的不同而有所差异。</span><br><span class="line"></span><br><span class="line">// 请求头</span><br><span class="line">// 单段数据</span><br><span class="line">Range: bytes=0-9</span><br><span class="line">// 多段数据</span><br><span class="line">Range: bytes=0-9, 30-39</span><br><span class="line"></span><br><span class="line">// 响应头</span><br><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Length: 10</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Range: bytes 0-9/100</span><br></pre></td></tr></table></figure><h3 id="009-HTTP-中如何处理表单数据的提交？"><a href="#009-HTTP-中如何处理表单数据的提交？" class="headerlink" title="009: HTTP 中如何处理表单数据的提交？"></a>009: HTTP 中如何处理表单数据的提交？</h3><p>http对表单提交在header中的<strong>content-type</strong>字段有两个值：</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li></ul><p>区别：</p><ol><li><strong>application/x-www-form-urlencoded</strong>中，其中的数据会被编码成以&amp;分隔的键值对， 且对字符会按url编码方式编码。</li><li><strong>multipart/form-data</strong>中， 对于图片等文件的上传，基本采用multipart/form-data而不用application/x-www-form-urlencoded，因为没有必要做 URL 编码，带来巨大耗时的同时也占用了更多的空间。</li></ol><p>实际的场景中，对于图片等文件的上传，基本采用multipart/form-data而不用application/x-www-form-urlencoded，因为没有必要做 URL 编码，带来巨大耗时的同时也占用了更多的空间。</p><h3 id="010-HTTP1-1-如何解决-HTTP-的队头阻塞问题？"><a href="#010-HTTP1-1-如何解决-HTTP-的队头阻塞问题？" class="headerlink" title="010: HTTP1.1 如何解决 HTTP 的队头阻塞问题？"></a>010: HTTP1.1 如何解决 HTTP 的队头阻塞问题？</h3><p>http是基于<em>请求-应答</em>模式进行通信的，http传输中的任务以队列形式进行排列，如果队首请求处理太慢会阻塞后端请求的处理，这就是队头阻塞。</p><p>http1.1解决方法， 浏览器对同一域名请求允许6个并发连接，那么可以使用<strong>域名分片</strong>（对同一域名进行降级/区分。让其以多种域名进行并发连接）的技巧解决问题</p><blockquote><p>持续更新。。。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本片文档对神三元的《http灵魂之问》中问题的分析与理解。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;知识图谱&quot;&gt;&lt;a href=&quot;#知识图谱&quot; class=&quot;headerlink&quot; title=&quot;知识图谱&quot;&gt;&lt;/a&gt;知识图谱&lt;/h2&gt;&lt;p&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>封装ajax请求</title>
    <link href="http://hellojackhui.github.io/2020/03/25/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B0%81%E8%A3%85ajax/"/>
    <id>http://hellojackhui.github.io/2020/03/25/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%B0%81%E8%A3%85ajax/</id>
    <published>2020-03-25T00:08:39.662Z</published>
    <updated>2020-03-25T00:52:26.218Z</updated>
    
    <content type="html"><![CDATA[<p>ajax请求是我们实现C/S交互的重要请求形式，通过创建<code>XMLHttpRequest</code>对象，实现对象中的open，send等方法完成对于ajax请求的创建。但是实际使用中我需要对ajax请求作以封装以满足不同请求条件，这篇短文就介绍我们如何对ajax请求做以封装。</p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>封装ajax请求之前，对于参数需要考虑一下内容：</p><table><thead><tr><th>问题</th><th>解决方法</th></tr></thead><tbody><tr><td>兼容性</td><td>判断是用XMLHttpRequest还是ActiveXObject</td></tr><tr><td>请求头</td><td>通过xhr.setRequestHeader进行添加</td></tr><tr><td>请求数据格式</td><td>用formdata统一封装</td></tr><tr><td>是否跨域</td><td>在xhr设置withCredentials为true</td></tr></tbody></table><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// ie5-6不支持XMLHttpRequest，需要兼容</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123;action, method, headers, datas, withCredentials, filename, file, onerror, onsuccess, onprogress&#125; = options;</span><br><span class="line">  <span class="comment">// 数据以formdata形式添加</span></span><br><span class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  <span class="keyword">if</span> (datas) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> datas) &#123;</span><br><span class="line">      formData.append(key, datas[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  formData.append(filename, file);</span><br><span class="line">  <span class="comment">// 请求头添加</span></span><br><span class="line">  <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">      xhr.setRequestHeader(key, headers[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 跨域添加</span></span><br><span class="line">  <span class="keyword">if</span> (withCredentials) &#123;</span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听事件添加</span></span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    onerror(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载完毕后通过状态码判断请求成功还是失败</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &lt; <span class="number">200</span> || xhr.status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">      onerror(setError(action, e, xhr));</span><br><span class="line">    &#125;</span><br><span class="line">    onsuccess(setSuccess(xhr))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 上传时的progress状态</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.upload) &#123;</span><br><span class="line">    xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (e.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        e.percent = (e.loaded / e.total) * <span class="number">100</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      onprogress(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建请求</span></span><br><span class="line">  xhr.open(method, action, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 发送请求</span></span><br><span class="line">  xhr.send(formData);</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对失败请求的返回内容封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setError</span>(<span class="params">action, e, xhr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (xhr.response) &#123;</span><br><span class="line">    msg = <span class="string">`<span class="subst">$&#123;xhr.status&#125;</span> <span class="subst">$&#123;xhr.response&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.responseText) &#123;</span><br><span class="line">    msg = <span class="string">`<span class="subst">$&#123;xhr.status&#125;</span> <span class="subst">$&#123;xhr.responseText&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    msg = <span class="string">`fail to request <span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">  res.status = xhr.status;</span><br><span class="line">  res.action = action;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对成功请求对返回封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSuccess</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = xhr.response || xhr.responseText;</span><br><span class="line">  <span class="keyword">if</span> (!msg) <span class="keyword">return</span> msg;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(msg);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ajax请求是我们实现C/S交互的重要请求形式，通过创建&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象，实现对象中的open，send等方法完成对于ajax请求的创建。但是实际使用中我需要对ajax请求作以封装以满足不同请求条件，这篇短文就介绍我们如何对ajax
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>跨域问题</title>
    <link href="http://hellojackhui.github.io/2020/03/20/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://hellojackhui.github.io/2020/03/20/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-20T00:34:06.100Z</published>
    <updated>2020-03-20T16:46:11.422Z</updated>
    
    <content type="html"><![CDATA[<p>跨域问题是前端开发中比较重要的问题，因为它涉及到了数据或资源的获取问题，下面就介绍一下跨域问题的产生原因，解决方法。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p><code>浏览器</code>基于web安全的考虑，对我们发出的请求进行了同源策略的限定。所谓同源策略就是<code>在协议，域名，端口号保持一致</code>的两个url路径满足同源策略。示例如下：</p><table><thead><th>域名</th><th>是否满足同源策略</th><th>原因</th></thead><tbody><tr><td>http://www.baidu.com</td><td rowspan="2">否</td><td rowspan="2">协议不一致，端口不一致</td></tr><tr><td>https://www.baidu.com</td></tr><tr><td>https://www.baidu.com:2020</td><td rowspan="2">否</td><td rowspan="2">端口不一致</td></tr><tr><td>https://www.baidu.com:2010</td></tr><tr><td>https://www.baidu.com</td><td rowspan="2">否</td><td rowspan="2">域名不一致</td></tr><tr><td>https://www.sina.com</td></tr><tr><td>https://www.baidu.com</td><td rowspan="2">是</td></tr><tr><td>https://www.baidu.com</td></tr></tbody></table><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>为了避开同源策略的限制，web工程师们使用了多种方法实现跨域请求。大体包括以下几种：</p><ul><li>iframe嵌入式</li><li>postmessage</li><li>jsonp</li><li>CORS</li><li>nginx</li></ul><h3 id="iframe嵌入式"><a href="#iframe嵌入式" class="headerlink" title="iframe嵌入式"></a>iframe嵌入式</h3><blockquote><p>注：以下iframe页面都是在a.html中嵌入显示b.html页面的iframe</p></blockquote><h4 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h4><p>使用条件：主域名相同<br>使用方式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a页面地址：https://www.baidu.com/a.html</span></span><br><span class="line"><span class="comment">// b页面地址: https://www.baidu.com/b.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a页面设置</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.html'</span>;</span><br><span class="line"><span class="comment">// b页面设置</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.html'</span>;</span><br></pre></td></tr></table></figure><h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p>使用条件：需要借助代理页面’proxy.html’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//需要传入传参的页面的url ，需要数据的页面或者iframeid （可以为null）</span></span><br><span class="line"><span class="keyword">var</span> getDomainData=<span class="function"><span class="keyword">function</span>(<span class="params">url,contIframeId</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>,</span><br><span class="line">  iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>),</span><br><span class="line">  loadfn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> data = iframe.contentWindow.name; <span class="comment">// 读取数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            <span class="keyword">var</span> jsonData=<span class="built_in">eval</span>(<span class="string">"("</span>+data+<span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">var</span> jsonData=<span class="built_in">JSON</span>.parse(data);</span><br><span class="line">            <span class="keyword">if</span>(contIframeId)$(<span class="string">"#"</span>+contIframeId).height(data).show();    </span><br><span class="line">      iframe.contentWindow.document.write(<span class="string">''</span>);<span class="comment">//得到数据之后移除</span></span><br><span class="line">      iframe.contentWindow.close();</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">      iframe.contentWindow.location = <span class="string">"/proxy.html"</span>; <span class="comment">// 设置的代理文件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">    iframe.src = url;  <span class="comment">//需要传参的页面</span></span><br><span class="line">    iframe.style.display = <span class="string">"none"</span>;</span><br><span class="line">    <span class="keyword">if</span>(iframe.attachEvent) &#123;</span><br><span class="line">        iframe.attachEvent(<span class="string">'onload'</span>, loadfn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        iframe.onload = loadfn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);<span class="comment">//载入iframe</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDomainData（<span class="string">"http://www. b.com/b.html"</span>,<span class="string">"contIframe"</span>）;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData=&#123;</span><br><span class="line">“name<span class="string">":value,</span></span><br><span class="line"><span class="string">"</span>name2<span class="string">":value2</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">window.name=JSON.stringify(jsonData);// 建议用json格式，也可以为字符串</span></span><br></pre></td></tr></table></figure><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>jsonp是我们经常使用的跨域形式，通过动态创建script标签完成get请求。缺点就是在于只能处理get请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> header = <span class="built_in">document</span>.querySelectorAll(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = params.url;</span><br><span class="line">    <span class="keyword">let</span> options = params.options;</span><br><span class="line">    <span class="keyword">let</span> callback = params.callback;</span><br><span class="line">    <span class="keyword">let</span> jsonpcallback = <span class="string">`jsonp<span class="subst">$&#123;id++&#125;</span>`</span></span><br><span class="line">    options[<span class="string">'jsonpcallback'</span>] = jsonpcallback;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> paramsArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">      paramsArr.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;options[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> search = paramsArr.join(<span class="string">'&amp;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      url = <span class="string">`<span class="subst">$&#123;url&#125;</span>&amp;<span class="subst">$&#123;search&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      url = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;search&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    dom.src = url;</span><br><span class="line"></span><br><span class="line">    global[jsonpcallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(dom);</span><br><span class="line">      callback &amp;&amp; callback(data);</span><br><span class="line">      <span class="keyword">delete</span> global[jsonpcallback]</span><br><span class="line">    &#125;</span><br><span class="line">    header.appendChild(dom);</span><br><span class="line">  &#125;</span><br><span class="line">  glovbal.jsonp = jsonp;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（跨站资源共享）是一种实现客户端发送普通请求能力的跨域解决方案，通过服务端返回客户端可以跨域去请求的域名范围，告诉客户端应该请求哪些跨域请求。</p><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><p>当客户端发出跨域请求时，如果不是简单请求会先发送一个预检请求，这个请求的请求类型是option</p><h5 id="简单请求的条件如下："><a href="#简单请求的条件如下：" class="headerlink" title="简单请求的条件如下："></a>简单请求的条件如下：</h5><ul><li>请求类型： GET, POST, HEAD</li><li>请求头: ACCEPT, ACCEPT-LANGURAGE, CONTENT-TYPE, CONTENT-LENGTH etc.</li><li>content-type的类型： text/plain, multiple/form-data, application/x-www-form-urlloaded</li></ul><p>在预检请求中，请求头需要携带以下参数: <code>accecc-contorl-request-method</code>, <code>accecc-contorl-request-header</code><br>在返回时会携带：<code>accecc-contorl-allow-method</code>,<code>accecc-contorl-allow-origin</code>, <code>accecc-contorl-allow-credentials</code></p><h3 id="postmessage"><a href="#postmessage" class="headerlink" title="postmessage"></a>postmessage</h3><p>postmessage是HTML5的api，用于两个页面之间的通信。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line"><span class="built_in">window</span>.addeventlistener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.origin == <span class="string">'http://test.ybl.ucmed.cn'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line"><span class="comment">// 第一个参数是数据，第二个参数就是请求的目标服务器</span></span><br><span class="line"><span class="built_in">window</span>.postmessage((&#123;<span class="string">"height"</span>:<span class="number">300</span>&#125;), *)</span><br></pre></td></tr></table></figure><h3 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h3><p>１．ａ.html首先创建自动创建一个隐藏的iframe，iframe的src指向ｂ.com域名下的ｂ.html页面<br>２．ｂ.html响应请求后再将通过修改ａ.html的hash值来传递数据<br>３．同时在ａ.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值<br>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe来解决这个问题（proxy.html）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    ifr.style.display = <span class="string">'none'</span>;</span><br><span class="line">    ifr.src = <span class="string">'http://test.promange.ucmed.cn'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">console</span>.log) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span>+data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(checkHash, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line"><span class="keyword">switch</span>(location.hash)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#data'</span>:</span><br><span class="line">        callBack(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#paramset'</span>:</span><br><span class="line">        <span class="comment">//do something……</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params">dat</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        parent.location.hash = dat;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></span><br><span class="line">        <span class="comment">// 所以要利用一个中间的a.com域下的代理iframe</span></span><br><span class="line">        <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">        ifrproxy.style.display = <span class="string">'none'</span>;</span><br><span class="line">        ifrproxy.src = <span class="string">'http://www.a.com/proxy.html#'</span>+dat;    <span class="comment">// 注意该文件在"a.com"域下</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(ifrproxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="websocket-实时通讯"><a href="#websocket-实时通讯" class="headerlink" title="websocket 实时通讯"></a>websocket 实时通讯</h3><p>• web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)<br>• web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(“ws:<span class="comment">//localhost:8080”);</span></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(“open”);</span><br><span class="line">  ws.send(“hello”);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(evt.data)</span><br><span class="line">&#125;;</span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(“WebSocketClosed!”);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(“WebSocketError!”);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="nginx代理"><a href="#nginx代理" class="headerlink" title="nginx代理"></a>nginx代理</h3><p>通过nginx配置或wds针对需要跨域请求的接口均采用统一前缀，然后设置请求转发。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^.+apis/?(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">include</span>  uwsgi_params;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://localhost:1894;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://172.16.75.117:3003/'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api/'</span>: <span class="string">'/'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><p>• 浏览器同源策略和其规格（阮一峰）<br>• cors方案<br>• <a href="https://www.yuque.com/robinson/fe-guide/ukbns4#8e7759ef" target="_blank" rel="noopener">https://www.yuque.com/robinson/fe-guide/ukbns4#8e7759ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跨域问题是前端开发中比较重要的问题，因为它涉及到了数据或资源的获取问题，下面就介绍一下跨域问题的产生原因，解决方法。&lt;/p&gt;&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于对象的拷贝</title>
    <link href="http://hellojackhui.github.io/2020/03/18/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/"/>
    <id>http://hellojackhui.github.io/2020/03/18/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-03-18T00:35:21.042Z</published>
    <updated>2020-03-18T01:10:26.372Z</updated>
    
    <content type="html"><![CDATA[<p>js的数据类型分为基础类型和引用类型，基础类型存于栈中，而引用类型的存储是分为两部分，引用类型的地址（指针）存放在栈中，而具体的对象存放在堆中。</p><p>而当需要拷贝一份数据时，基础类型很简单，复制一份信息并存放到栈中，就能保证与原来的不是同一份。但是引用类型的话，例如我们将对象作为函数的参数传入。此时js只是将<code>引用类型的地址拷贝一份，添加到栈中</code>，虽然地址与原来的不一致，但是指向的对象是一致的。所以我们对传参对象的属性进行修改，会影响原来对象的原因就在于此。</p><p>但是有许多场景需要我们对对象进行不同程度的拷贝满足我们的需要，所以引出浅拷贝和深拷贝两种方式</p><blockquote><p>浅拷贝就是复制一份对象的指针，具体对象依然公用，深拷贝就是完整的复制一份指针和对象，另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p></blockquote><h3 id="浅拷贝的创建方法"><a href="#浅拷贝的创建方法" class="headerlink" title="浅拷贝的创建方法"></a>浅拷贝的创建方法</h3><ol><li>Array.prototype.slice();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">   username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">2</span>].username = <span class="string">'wade'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="2"><li>Array.prototype.concat();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">   username: <span class="string">'kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.concat();    </span><br><span class="line">arr2[<span class="number">2</span>].username = <span class="string">'wade'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="3"><li>Object.assign();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="string">"kobe"</span>, <span class="attr">b</span>: <span class="number">39</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> initalObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">initalObj.a.a = <span class="string">"wade"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a.a); <span class="comment">// wade</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: Array.prototype.slice/concat方法在拷贝过程中，如果属性的值为基础类型，那么当前值会完全拷贝，如果是引用类型，那么会拷贝引用类型的地址。</p></blockquote><h3 id="深拷贝的创建方法"><a href="#深拷贝的创建方法" class="headerlink" title="深拷贝的创建方法"></a>深拷贝的创建方法</h3><ol><li>JSON.prase(jSON.stringify(data))</li></ol><blockquote><p>缺点：对于部分数据类型和循环引用无法解决</p></blockquote><ol start="2"><li>递归实现</li></ol><p>关于创建深拷贝需要考虑一下几点：</p><ul><li>对于循环引用的问题</li><li>关于symbol数据类型的问题</li></ul><p>针对循环引用问题，可以考虑使用数据结构进行存储，遇到循环引用的直接取出即可， 针对不同的数据类型在遍历方式要有所区分，这里对于symbol数据类型，可以使用es6的Reflect.ownKeys进行遍历,这个方法包含了对于symbol属性的遍历</p><p>以下是基础实现版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepcopy</span>(<span class="params">source, map = new Map(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source != <span class="string">'object'</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (map.get(source)) <span class="keyword">return</span> map.get(source);</span><br><span class="line">  <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class="line">  map.set(source, target);</span><br><span class="line">  <span class="built_in">Reflect</span>.ownKeys(source).foreach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source[key] == <span class="literal">null</span>) &#123;</span><br><span class="line">        targe[key] = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[key] = deepcopy(source[key], map)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的数据类型分为基础类型和引用类型，基础类型存于栈中，而引用类型的存储是分为两部分，引用类型的地址（指针）存放在栈中，而具体的对象存放在堆中。&lt;/p&gt;&lt;p&gt;而当需要拷贝一份数据时，基础类型很简单，复制一份信息并存放到栈中，就能保证与原来的不是同一份。但是引用类型的话，例如
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://hellojackhui.github.io/2020/03/17/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/promise/"/>
    <id>http://hellojackhui.github.io/2020/03/17/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/promise/</id>
    <published>2020-03-17T00:47:48.081Z</published>
    <updated>2020-03-17T02:11:08.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是promise？"><a href="#什么是promise？" class="headerlink" title="什么是promise？"></a>什么是promise？</h2><p>promise是es6对异步编程的解决方案，基于状态的变化完成对于异步执行的控制，通过链式回调函数的调用部分解决回调地狱的问题。</p><h2 id="promise的主要概念"><a href="#promise的主要概念" class="headerlink" title="promise的主要概念"></a>promise的主要概念</h2><ol><li>状态：promise有三种状态，分别是pending，fullfilled, rejected, 状态具有不可逆性质，即pending态转fullfilled态或者pending态转rejected态</li><li>链式调用：promise使用then函数作为回调函数，且具有链式调用的能力，因为then返回的其实也是一个promise</li></ol><h2 id="promise的缺点"><a href="#promise的缺点" class="headerlink" title="promise的缺点"></a>promise的缺点</h2><ol><li>当实例化promise时会立刻执行</li><li>promise的链式调用并没有完全解决回调地狱问题，只是说换了一种方式。</li><li>promise对于错误捕获，如果不在then声明reject对于函数，是无法捕获错误的</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="promise的实现"><a href="#promise的实现" class="headerlink" title="promise的实现"></a>promise的实现</h3><p>在手写时需要考虑到的要点</p><ol><li>状态机的变化</li><li>在pending阶段回调函数的存储</li><li>对于then函数的返回需要根据传入的数据类型（值/promise）进行判断</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 三个状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULLFILLED = <span class="string">'fullfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前值</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 当前状态</span></span><br><span class="line">  <span class="keyword">this</span>.status = PENDING;</span><br><span class="line">  <span class="comment">// 状态pending时存储的的resolve函数数组</span></span><br><span class="line">  <span class="keyword">this</span>.resolveArr = [];</span><br><span class="line">  <span class="comment">// 状态reject时存储的的reject函数数组</span></span><br><span class="line">  <span class="keyword">this</span>.rejectArr = [];</span><br><span class="line">  <span class="comment">// resolve函数实现</span></span><br><span class="line">  <span class="keyword">this</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = val;</span><br><span class="line">    <span class="keyword">this</span>.status = FULLFILLED;</span><br><span class="line">    <span class="keyword">this</span>.resolveArr.forEach(<span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">      func(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// reject函数实现</span></span><br><span class="line">  <span class="keyword">this</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = val;</span><br><span class="line">    <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">    <span class="keyword">this</span>.rejectArr.forEach(<span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">      func(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">fullfillfunc, rejectedfunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fullfillfunc = <span class="keyword">typeof</span> fullfillfunc == <span class="string">'function'</span> ? fullfillfunc : <span class="function"><span class="params">args</span> =&gt;</span> args;</span><br><span class="line">  <span class="keyword">let</span> rejectedfunc = <span class="keyword">typeof</span> rejectedfunc == <span class="string">'function'</span> ? rejectedfunc : <span class="keyword">new</span> <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'xxxx'</span>);</span><br><span class="line">  <span class="keyword">let</span> promise2;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == FULLFILLED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = fullfillfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == REJECTED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = rejectedfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == PENDING) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resolveArr.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = fullfillfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.rejectArr.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = rejectedfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPromiseProcedure</span>(<span class="params">value, promise2, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == promise2) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="keyword">throw</span> <span class="built_in">Error</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> promise2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.status == PENDING) &#123;</span><br><span class="line">      value.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        setPromiseProcedure(val, promise2, resolve, reject);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">'function'</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then == <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(value, (y) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          setPromiseProcedure(y, promise2, resolve, reject);</span><br><span class="line">        &#125;, (e) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; cache(e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise的派生方法"><a href="#promise的派生方法" class="headerlink" title="promise的派生方法"></a>promise的派生方法</h2><h3 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h3><p>这个方法是当有多个异步方法执行时，有一个先执行完成就会立刻返回，函数传参为promise数组，返回为promise</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promiserace = <span class="function">(<span class="params">arr: <span class="built_in">Promise</span>[]</span>) =&gt;</span> <span class="built_in">Promise</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>): <span class="title">Promiserace</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> func of arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> func === <span class="string">'function'</span>) &#123;</span><br><span class="line">        func.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(val)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(func);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h3><p>这个方法用于当多个异步方法执行时，所有的异步方法成功执行后返回结果，否则返回reject</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] == <span class="string">'function'</span>) &#123;</span><br><span class="line">        arr[i]().then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          res.push(val);</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">if</span> (index == arr.length) &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, (e) =&gt; [</span><br><span class="line">          reject(e);</span><br><span class="line">        ])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-retry"><a href="#promise-retry" class="headerlink" title="promise.retry"></a>promise.retry</h3><p>promise.retry是实现可以多次在请求失败后重新请求的功能，需要考虑到请求次数的变化以及如何实现重新请求的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.retry = <span class="function"><span class="keyword">function</span>(<span class="params">func, times, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      func().then(resolve).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>) reject(e);</span><br><span class="line">        times--;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> request(), delay);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    request();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是promise？&quot;&gt;&lt;a href=&quot;#什么是promise？&quot; class=&quot;headerlink&quot; title=&quot;什么是promise？&quot;&gt;&lt;/a&gt;什么是promise？&lt;/h2&gt;&lt;p&gt;promise是es6对异步编程的解决方案，基于状态的变化完成对于异
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS基础内容</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</id>
    <published>2020-03-15T15:01:51.483Z</published>
    <updated>2020-03-16T01:48:47.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。</p></blockquote><h1 id="2020-03-15"><a href="#2020-03-15" class="headerlink" title="2020-03-15"></a>2020-03-15</h1><h2 id="1-JS的数据类型"><a href="#1-JS的数据类型" class="headerlink" title="1. JS的数据类型"></a>1. JS的数据类型</h2><p>答：迄今为止，js一共有8种数据类型，内容如下：</p><table><thead><tr><th>数据类型</th><th>名称</th><th>类别</th></tr></thead><tbody><tr><td>String</td><td>字符串</td><td>基础类型</td></tr><tr><td>Number</td><td>数字</td><td>基础类型</td></tr><tr><td>Boolean</td><td>布尔</td><td>基础类型</td></tr><tr><td>Null</td><td>空</td><td>基础类型</td></tr><tr><td>Undefined</td><td>未定义</td><td>基础类型</td></tr><tr><td>Symbol</td><td>标志（唯一值）</td><td>基础类型</td></tr><tr><td>BigInt</td><td>大Int</td><td>基础类型</td></tr><tr><td>Object</td><td>对象</td><td>引用类型</td></tr></tbody></table><h2 id="2-对于类型判断的方法和优缺点"><a href="#2-对于类型判断的方法和优缺点" class="headerlink" title="2. 对于类型判断的方法和优缺点"></a>2. 对于类型判断的方法和优缺点</h2><p>答： 一般对于类型的判断有一下几种方式</p><ul><li>Object.prototype.toString()</li><li>sub instanceof super</li><li>Array.isArray(xxx) // 针对数组的处理</li><li>typeof</li></ul><p>Object.prototype.toString()</p><p>这个方式是Object对象原型的方法，返回为<code>[object 类型]</code>,这个方法是非常成功的，因为可以判别几乎所有类型，所以推荐使用该方法进行严谨的判断。</p><p>instanceof是判断对象是否是另一个对象的实例，具体是通过原型链查找对象的<strong>proto</strong>是否为另一个对象的原型对象完成判断。</p><p>Array属于Array构造函数的api方法，判断数组类型。</p><p>typeof可以判断属于基础类型的数据类型和function类型，但是引用类型同一返回<code>object</code>，所以有使用的局限性。</p><h2 id="3-js的隐式转换问题"><a href="#3-js的隐式转换问题" class="headerlink" title="3. js的隐式转换问题"></a>3. js的隐式转换问题</h2><blockquote><p>由于js是弱语言类型，所以js中数据之间的比较和运算会出现转换的问题，现总结如下：</p></blockquote><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>‘null’</td></tr><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>symbol</td><td>‘symbol’</td></tr><tr><td>true</td><td>‘true’</td></tr><tr><td>999</td><td>‘999’</td></tr><tr><td>[1,2]</td><td>‘1,2’</td></tr><tr><td>[]</td><td>‘’</td></tr><tr><td>{}</td><td>‘[object, object]’</td></tr></tbody></table><h3 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>0</td></tr><tr><td>undefined</td><td>NaN</td></tr><tr><td>true</td><td>1</td></tr><tr><td>[1,2]</td><td>NaN</td></tr><tr><td>‘1a’</td><td>NaN</td></tr><tr><td>[]</td><td>0</td></tr><tr><td>{}</td><td>NaN</td></tr></tbody></table><h3 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h3><blockquote><p>js中的假值只有false、null、undefined、空字符、0和NaN，其它值转为布尔型都为true。</p></blockquote><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>false</td></tr><tr><td>undefined</td><td>false</td></tr><tr><td>true</td><td>true</td></tr><tr><td>[1,2]</td><td>true</td></tr><tr><td>‘1a’</td><td>true</td></tr><tr><td>‘’</td><td>false</td></tr><tr><td>[]</td><td>true</td></tr><tr><td>{}</td><td>true</td></tr></tbody></table><h3 id="关于浏览器对-的解析方式"><a href="#关于浏览器对-的解析方式" class="headerlink" title="关于浏览器对{}的解析方式"></a>关于浏览器对{}的解析方式</h3><blockquote><p>{} + [] == 0 // true</p></blockquote><p>当{}的前面有运算符号的时候，+，-，*，/,()等等，{}都会被解析成对象字面量，这无可争议。<br>当{}前面没有运算符时候但有;结尾的时候，或者浏览器的自动分号插入机制给{}后面插入分号(;)时候，此时{}都会被解析成代码块。<br>如果{}前面什么运算符都没有，{}后面也没有分号(;)结尾，Firefox和chrome会解析为代码块，也就是不会参与计算。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>默认处理顺序： 先valueOf，如果不返回基本类型，就执行toString</p><ul><li>当对象类型需要被转为原始类型时，它会先查找对象的valueOf方法，如果valueOf方法返回原始类型的值，则ToPrimitive的结果就是这个值.</li><li>如果valueOf不存在或者valueOf方法返回的不是原始类型的值，就会尝试调用对象的toString方法，也就是会遵循对象的ToString规则，然后使用toString的返回值作为ToPrimitive的结果。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;2020-03-15&quot;&gt;&lt;a href=&quot;#2020-03-15&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-03-15T14:23:10.607Z</published>
    <updated>2020-03-16T01:08:41.326Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>通俗来讲，防抖就是每次触发事件时，会打断前一次事件处理，并重新执行。例如：我们需要延时发送请求，当重新触发事件时，会重置延时。</p></blockquote><p>具体实现：主要需要注意的就是触发时，需要重置settimeout操作，而后重新计时。并且需要考虑是否立刻执行的leading参数的执行时机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: ctx,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: true,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.leading) &#123;</span><br><span class="line">      <span class="keyword">let</span> immediate = !timer;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;wait)</span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>节流实现的是当前一个发出延时操作时，后一个操作如果在这个延时时间内，就不执行。我们需要考虑的就是如何判定这个延时时间。</p></blockquote><p>具体实现：</p><ul><li><ol><li>需要计算在什么条件下可以执行该函数。</li></ol></li><li><ol start="2"><li>需要考虑立刻触发的leading和最后一次执行tailing参数的执行时机。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: context,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: false,</span></span></span><br><span class="line"><span class="function"><span class="params">  tailing: true</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>).getTime();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">later</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    prev = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    fn.apply(options.ctx, args);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="comment">// 如果不立刻执行，需要调整prev的时间线</span></span><br><span class="line">    <span class="keyword">if</span> (!timer &amp;&amp; !options.leading) &#123;</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> remain = wait - (now - prev);</span><br><span class="line">    <span class="keyword">if</span> (remain &lt; <span class="number">0</span> || remain &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      fn.apply(options.ctx, args);</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.tailing != <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果最后想执行的话，需要在剩余的时间后执行函数</span></span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        later()</span><br><span class="line">      &#125;, remain)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。&lt;/p&gt;&lt;h2 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;通俗来讲，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hellojackhui.github.io/2020/03/15/hello-world/"/>
    <id>http://hellojackhui.github.io/2020/03/15/hello-world/</id>
    <published>2020-03-14T16:28:05.046Z</published>
    <updated>2020-03-14T16:28:05.046Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
