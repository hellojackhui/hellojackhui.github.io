<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惠嘉伟的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hellojackhui.github.io/"/>
  <updated>2020-03-16T01:48:47.144Z</updated>
  <id>http://hellojackhui.github.io/</id>
  
  <author>
    <name>Hellojackhui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS基础内容</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</id>
    <published>2020-03-15T15:01:51.483Z</published>
    <updated>2020-03-16T01:48:47.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。</p></blockquote><h1 id="2020-03-15"><a href="#2020-03-15" class="headerlink" title="2020-03-15"></a>2020-03-15</h1><h2 id="1-JS的数据类型"><a href="#1-JS的数据类型" class="headerlink" title="1. JS的数据类型"></a>1. JS的数据类型</h2><p>答：迄今为止，js一共有8种数据类型，内容如下：</p><table><thead><tr><th>数据类型</th><th>名称</th><th>类别</th></tr></thead><tbody><tr><td>String</td><td>字符串</td><td>基础类型</td></tr><tr><td>Number</td><td>数字</td><td>基础类型</td></tr><tr><td>Boolean</td><td>布尔</td><td>基础类型</td></tr><tr><td>Null</td><td>空</td><td>基础类型</td></tr><tr><td>Undefined</td><td>未定义</td><td>基础类型</td></tr><tr><td>Symbol</td><td>标志（唯一值）</td><td>基础类型</td></tr><tr><td>BigInt</td><td>大Int</td><td>基础类型</td></tr><tr><td>Object</td><td>对象</td><td>引用类型</td></tr></tbody></table><h2 id="2-对于类型判断的方法和优缺点"><a href="#2-对于类型判断的方法和优缺点" class="headerlink" title="2. 对于类型判断的方法和优缺点"></a>2. 对于类型判断的方法和优缺点</h2><p>答： 一般对于类型的判断有一下几种方式</p><ul><li>Object.prototype.toString()</li><li>sub instanceof super</li><li>Array.isArray(xxx) // 针对数组的处理</li><li>typeof</li></ul><p>Object.prototype.toString()</p><p>这个方式是Object对象原型的方法，返回为<code>[object 类型]</code>,这个方法是非常成功的，因为可以判别几乎所有类型，所以推荐使用该方法进行严谨的判断。</p><p>instanceof是判断对象是否是另一个对象的实例，具体是通过原型链查找对象的<strong>proto</strong>是否为另一个对象的原型对象完成判断。</p><p>Array属于Array构造函数的api方法，判断数组类型。</p><p>typeof可以判断属于基础类型的数据类型和function类型，但是引用类型同一返回<code>object</code>，所以有使用的局限性。</p><h2 id="3-js的隐式转换问题"><a href="#3-js的隐式转换问题" class="headerlink" title="3. js的隐式转换问题"></a>3. js的隐式转换问题</h2><blockquote><p>由于js是弱语言类型，所以js中数据之间的比较和运算会出现转换的问题，现总结如下：</p></blockquote><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>‘null’</td></tr><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>symbol</td><td>‘symbol’</td></tr><tr><td>true</td><td>‘true’</td></tr><tr><td>999</td><td>‘999’</td></tr><tr><td>[1,2]</td><td>‘1,2’</td></tr><tr><td>[]</td><td>‘’</td></tr><tr><td>{}</td><td>‘[object, object]’</td></tr></tbody></table><h3 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>0</td></tr><tr><td>undefined</td><td>NaN</td></tr><tr><td>true</td><td>1</td></tr><tr><td>[1,2]</td><td>NaN</td></tr><tr><td>‘1a’</td><td>NaN</td></tr><tr><td>[]</td><td>0</td></tr><tr><td>{}</td><td>NaN</td></tr></tbody></table><h3 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h3><blockquote><p>js中的假值只有false、null、undefined、空字符、0和NaN，其它值转为布尔型都为true。</p></blockquote><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>false</td></tr><tr><td>undefined</td><td>false</td></tr><tr><td>true</td><td>true</td></tr><tr><td>[1,2]</td><td>true</td></tr><tr><td>‘1a’</td><td>true</td></tr><tr><td>‘’</td><td>false</td></tr><tr><td>[]</td><td>true</td></tr><tr><td>{}</td><td>true</td></tr></tbody></table><h3 id="关于浏览器对-的解析方式"><a href="#关于浏览器对-的解析方式" class="headerlink" title="关于浏览器对{}的解析方式"></a>关于浏览器对{}的解析方式</h3><blockquote><p>{} + [] == 0 // true</p></blockquote><p>当{}的前面有运算符号的时候，+，-，*，/,()等等，{}都会被解析成对象字面量，这无可争议。<br>当{}前面没有运算符时候但有;结尾的时候，或者浏览器的自动分号插入机制给{}后面插入分号(;)时候，此时{}都会被解析成代码块。<br>如果{}前面什么运算符都没有，{}后面也没有分号(;)结尾，Firefox和chrome会解析为代码块，也就是不会参与计算。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>默认处理顺序： 先valueOf，如果不返回基本类型，就执行toString</p><ul><li>当对象类型需要被转为原始类型时，它会先查找对象的valueOf方法，如果valueOf方法返回原始类型的值，则ToPrimitive的结果就是这个值.</li><li>如果valueOf不存在或者valueOf方法返回的不是原始类型的值，就会尝试调用对象的toString方法，也就是会遵循对象的ToString规则，然后使用toString的返回值作为ToPrimitive的结果。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;2020-03-15&quot;&gt;&lt;a href=&quot;#2020-03-15&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-03-15T14:23:10.607Z</published>
    <updated>2020-03-16T01:08:41.326Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>通俗来讲，防抖就是每次触发事件时，会打断前一次事件处理，并重新执行。例如：我们需要延时发送请求，当重新触发事件时，会重置延时。</p></blockquote><p>具体实现：主要需要注意的就是触发时，需要重置settimeout操作，而后重新计时。并且需要考虑是否立刻执行的leading参数的执行时机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: ctx,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: true,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.leading) &#123;</span><br><span class="line">      <span class="keyword">let</span> immediate = !timer;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;wait)</span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>节流实现的是当前一个发出延时操作时，后一个操作如果在这个延时时间内，就不执行。我们需要考虑的就是如何判定这个延时时间。</p></blockquote><p>具体实现：</p><ul><li><ol><li>需要计算在什么条件下可以执行该函数。</li></ol></li><li><ol start="2"><li>需要考虑立刻触发的leading和最后一次执行tailing参数的执行时机。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: context,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: false,</span></span></span><br><span class="line"><span class="function"><span class="params">  tailing: true</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>).getTime();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">later</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    prev = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    fn.apply(options.ctx, args);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="comment">// 如果不立刻执行，需要调整prev的时间线</span></span><br><span class="line">    <span class="keyword">if</span> (!timer &amp;&amp; !options.leading) &#123;</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> remain = wait - (now - prev);</span><br><span class="line">    <span class="keyword">if</span> (remain &lt; <span class="number">0</span> || remain &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      fn.apply(options.ctx, args);</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.tailing != <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果最后想执行的话，需要在剩余的时间后执行函数</span></span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        later()</span><br><span class="line">      &#125;, remain)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。&lt;/p&gt;&lt;h2 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;通俗来讲，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hellojackhui.github.io/2020/03/15/hello-world/"/>
    <id>http://hellojackhui.github.io/2020/03/15/hello-world/</id>
    <published>2020-03-14T16:28:05.046Z</published>
    <updated>2020-03-14T16:28:05.046Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
