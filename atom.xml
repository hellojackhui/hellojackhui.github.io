<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惠嘉伟的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hellojackhui.github.io/"/>
  <updated>2020-03-18T01:10:26.372Z</updated>
  <id>http://hellojackhui.github.io/</id>
  
  <author>
    <name>Hellojackhui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于对象的拷贝</title>
    <link href="http://hellojackhui.github.io/2020/03/18/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/"/>
    <id>http://hellojackhui.github.io/2020/03/18/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-03-18T00:35:21.042Z</published>
    <updated>2020-03-18T01:10:26.372Z</updated>
    
    <content type="html"><![CDATA[<p>js的数据类型分为基础类型和引用类型，基础类型存于栈中，而引用类型的存储是分为两部分，引用类型的地址（指针）存放在栈中，而具体的对象存放在堆中。</p><p>而当需要拷贝一份数据时，基础类型很简单，复制一份信息并存放到栈中，就能保证与原来的不是同一份。但是引用类型的话，例如我们将对象作为函数的参数传入。此时js只是将<code>引用类型的地址拷贝一份，添加到栈中</code>，虽然地址与原来的不一致，但是指向的对象是一致的。所以我们对传参对象的属性进行修改，会影响原来对象的原因就在于此。</p><p>但是有许多场景需要我们对对象进行不同程度的拷贝满足我们的需要，所以引出浅拷贝和深拷贝两种方式</p><blockquote><p>浅拷贝就是复制一份对象的指针，具体对象依然公用，深拷贝就是完整的复制一份指针和对象，另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p></blockquote><h3 id="浅拷贝的创建方法"><a href="#浅拷贝的创建方法" class="headerlink" title="浅拷贝的创建方法"></a>浅拷贝的创建方法</h3><ol><li>Array.prototype.slice();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">   username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">2</span>].username = <span class="string">'wade'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="2"><li>Array.prototype.concat();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">   username: <span class="string">'kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.concat();    </span><br><span class="line">arr2[<span class="number">2</span>].username = <span class="string">'wade'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ol start="3"><li>Object.assign();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="string">"kobe"</span>, <span class="attr">b</span>: <span class="number">39</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> initalObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">initalObj.a.a = <span class="string">"wade"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a.a); <span class="comment">// wade</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: Array.prototype.slice/concat方法在拷贝过程中，如果属性的值为基础类型，那么当前值会完全拷贝，如果是引用类型，那么会拷贝引用类型的地址。</p></blockquote><h3 id="深拷贝的创建方法"><a href="#深拷贝的创建方法" class="headerlink" title="深拷贝的创建方法"></a>深拷贝的创建方法</h3><ol><li>JSON.prase(jSON.stringify(data))</li></ol><blockquote><p>缺点：对于部分数据类型和循环引用无法解决</p></blockquote><ol start="2"><li>递归实现</li></ol><p>关于创建深拷贝需要考虑一下几点：</p><ul><li>对于循环引用的问题</li><li>关于symbol数据类型的问题</li></ul><p>针对循环引用问题，可以考虑使用数据结构进行存储，遇到循环引用的直接取出即可， 针对不同的数据类型在遍历方式要有所区分，这里对于symbol数据类型，可以使用es6的Reflect.ownKeys进行遍历,这个方法包含了对于symbol属性的遍历</p><p>以下是基础实现版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepcopy</span>(<span class="params">source, map = new Map(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source != <span class="string">'object'</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (map.get(source)) <span class="keyword">return</span> map.get(source);</span><br><span class="line">  <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class="line">  map.set(source, target);</span><br><span class="line">  <span class="built_in">Reflect</span>.ownKeys(source).foreach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (source[key] == <span class="literal">null</span>) &#123;</span><br><span class="line">        targe[key] = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[key] = deepcopy(source[key], map)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js的数据类型分为基础类型和引用类型，基础类型存于栈中，而引用类型的存储是分为两部分，引用类型的地址（指针）存放在栈中，而具体的对象存放在堆中。&lt;/p&gt;&lt;p&gt;而当需要拷贝一份数据时，基础类型很简单，复制一份信息并存放到栈中，就能保证与原来的不是同一份。但是引用类型的话，例如
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://hellojackhui.github.io/2020/03/17/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/promise/"/>
    <id>http://hellojackhui.github.io/2020/03/17/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/promise/</id>
    <published>2020-03-17T00:47:48.081Z</published>
    <updated>2020-03-17T02:11:08.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是promise？"><a href="#什么是promise？" class="headerlink" title="什么是promise？"></a>什么是promise？</h2><p>promise是es6对异步编程的解决方案，基于状态的变化完成对于异步执行的控制，通过链式回调函数的调用部分解决回调地狱的问题。</p><h2 id="promise的主要概念"><a href="#promise的主要概念" class="headerlink" title="promise的主要概念"></a>promise的主要概念</h2><ol><li>状态：promise有三种状态，分别是pending，fullfilled, rejected, 状态具有不可逆性质，即pending态转fullfilled态或者pending态转rejected态</li><li>链式调用：promise使用then函数作为回调函数，且具有链式调用的能力，因为then返回的其实也是一个promise</li></ol><h2 id="promise的缺点"><a href="#promise的缺点" class="headerlink" title="promise的缺点"></a>promise的缺点</h2><ol><li>当实例化promise时会立刻执行</li><li>promise的链式调用并没有完全解决回调地狱问题，只是说换了一种方式。</li><li>promise对于错误捕获，如果不在then声明reject对于函数，是无法捕获错误的</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="promise的实现"><a href="#promise的实现" class="headerlink" title="promise的实现"></a>promise的实现</h3><p>在手写时需要考虑到的要点</p><ol><li>状态机的变化</li><li>在pending阶段回调函数的存储</li><li>对于then函数的返回需要根据传入的数据类型（值/promise）进行判断</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 三个状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULLFILLED = <span class="string">'fullfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前值</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 当前状态</span></span><br><span class="line">  <span class="keyword">this</span>.status = PENDING;</span><br><span class="line">  <span class="comment">// 状态pending时存储的的resolve函数数组</span></span><br><span class="line">  <span class="keyword">this</span>.resolveArr = [];</span><br><span class="line">  <span class="comment">// 状态reject时存储的的reject函数数组</span></span><br><span class="line">  <span class="keyword">this</span>.rejectArr = [];</span><br><span class="line">  <span class="comment">// resolve函数实现</span></span><br><span class="line">  <span class="keyword">this</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = val;</span><br><span class="line">    <span class="keyword">this</span>.status = FULLFILLED;</span><br><span class="line">    <span class="keyword">this</span>.resolveArr.forEach(<span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">      func(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// reject函数实现</span></span><br><span class="line">  <span class="keyword">this</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = val;</span><br><span class="line">    <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">    <span class="keyword">this</span>.rejectArr.forEach(<span class="function">(<span class="params">func</span>) =&gt;</span> &#123;</span><br><span class="line">      func(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(<span class="keyword">this</span>.resolve, <span class="keyword">this</span>.reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">fullfillfunc, rejectedfunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fullfillfunc = <span class="keyword">typeof</span> fullfillfunc == <span class="string">'function'</span> ? fullfillfunc : <span class="function"><span class="params">args</span> =&gt;</span> args;</span><br><span class="line">  <span class="keyword">let</span> rejectedfunc = <span class="keyword">typeof</span> rejectedfunc == <span class="string">'function'</span> ? rejectedfunc : <span class="keyword">new</span> <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'xxxx'</span>);</span><br><span class="line">  <span class="keyword">let</span> promise2;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == FULLFILLED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = fullfillfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == REJECTED) &#123;</span><br><span class="line">    promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = rejectedfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.status == PENDING) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resolveArr.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = fullfillfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.rejectArr.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      settimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = rejectedfunc(<span class="keyword">this</span>.value);</span><br><span class="line">        setPromiseProcedure(value, promise2, resolve, reject);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPromiseProcedure</span>(<span class="params">value, promise2, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == promise2) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="keyword">throw</span> <span class="built_in">Error</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> promise2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.status == PENDING) &#123;</span><br><span class="line">      value.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        setPromiseProcedure(val, promise2, resolve, reject);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">'function'</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then == <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(value, (y) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          setPromiseProcedure(y, promise2, resolve, reject);</span><br><span class="line">        &#125;, (e) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; cache(e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise的派生方法"><a href="#promise的派生方法" class="headerlink" title="promise的派生方法"></a>promise的派生方法</h2><h3 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h3><p>这个方法是当有多个异步方法执行时，有一个先执行完成就会立刻返回，函数传参为promise数组，返回为promise</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promiserace = <span class="function">(<span class="params">arr: <span class="built_in">Promise</span>[]</span>) =&gt;</span> <span class="built_in">Promise</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>): <span class="title">Promiserace</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> func of arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> func === <span class="string">'function'</span>) &#123;</span><br><span class="line">        func.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(val)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(func);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h3><p>这个方法用于当多个异步方法执行时，所有的异步方法成功执行后返回结果，否则返回reject</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> arr[i] == <span class="string">'function'</span>) &#123;</span><br><span class="line">        arr[i]().then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">          res.push(val);</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">if</span> (index == arr.length) &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, (e) =&gt; [</span><br><span class="line">          reject(e);</span><br><span class="line">        ])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-retry"><a href="#promise-retry" class="headerlink" title="promise.retry"></a>promise.retry</h3><p>promise.retry是实现可以多次在请求失败后重新请求的功能，需要考虑到请求次数的变化以及如何实现重新请求的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.retry = <span class="function"><span class="keyword">function</span>(<span class="params">func, times, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      func().then(resolve).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (times == <span class="number">0</span>) reject(e);</span><br><span class="line">        times--;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> request(), delay);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    request();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是promise？&quot;&gt;&lt;a href=&quot;#什么是promise？&quot; class=&quot;headerlink&quot; title=&quot;什么是promise？&quot;&gt;&lt;/a&gt;什么是promise？&lt;/h2&gt;&lt;p&gt;promise是es6对异步编程的解决方案，基于状态的变化完成对于异
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS基础内容</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JS%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</id>
    <published>2020-03-15T15:01:51.483Z</published>
    <updated>2020-03-16T01:48:47.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。</p></blockquote><h1 id="2020-03-15"><a href="#2020-03-15" class="headerlink" title="2020-03-15"></a>2020-03-15</h1><h2 id="1-JS的数据类型"><a href="#1-JS的数据类型" class="headerlink" title="1. JS的数据类型"></a>1. JS的数据类型</h2><p>答：迄今为止，js一共有8种数据类型，内容如下：</p><table><thead><tr><th>数据类型</th><th>名称</th><th>类别</th></tr></thead><tbody><tr><td>String</td><td>字符串</td><td>基础类型</td></tr><tr><td>Number</td><td>数字</td><td>基础类型</td></tr><tr><td>Boolean</td><td>布尔</td><td>基础类型</td></tr><tr><td>Null</td><td>空</td><td>基础类型</td></tr><tr><td>Undefined</td><td>未定义</td><td>基础类型</td></tr><tr><td>Symbol</td><td>标志（唯一值）</td><td>基础类型</td></tr><tr><td>BigInt</td><td>大Int</td><td>基础类型</td></tr><tr><td>Object</td><td>对象</td><td>引用类型</td></tr></tbody></table><h2 id="2-对于类型判断的方法和优缺点"><a href="#2-对于类型判断的方法和优缺点" class="headerlink" title="2. 对于类型判断的方法和优缺点"></a>2. 对于类型判断的方法和优缺点</h2><p>答： 一般对于类型的判断有一下几种方式</p><ul><li>Object.prototype.toString()</li><li>sub instanceof super</li><li>Array.isArray(xxx) // 针对数组的处理</li><li>typeof</li></ul><p>Object.prototype.toString()</p><p>这个方式是Object对象原型的方法，返回为<code>[object 类型]</code>,这个方法是非常成功的，因为可以判别几乎所有类型，所以推荐使用该方法进行严谨的判断。</p><p>instanceof是判断对象是否是另一个对象的实例，具体是通过原型链查找对象的<strong>proto</strong>是否为另一个对象的原型对象完成判断。</p><p>Array属于Array构造函数的api方法，判断数组类型。</p><p>typeof可以判断属于基础类型的数据类型和function类型，但是引用类型同一返回<code>object</code>，所以有使用的局限性。</p><h2 id="3-js的隐式转换问题"><a href="#3-js的隐式转换问题" class="headerlink" title="3. js的隐式转换问题"></a>3. js的隐式转换问题</h2><blockquote><p>由于js是弱语言类型，所以js中数据之间的比较和运算会出现转换的问题，现总结如下：</p></blockquote><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>‘null’</td></tr><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>symbol</td><td>‘symbol’</td></tr><tr><td>true</td><td>‘true’</td></tr><tr><td>999</td><td>‘999’</td></tr><tr><td>[1,2]</td><td>‘1,2’</td></tr><tr><td>[]</td><td>‘’</td></tr><tr><td>{}</td><td>‘[object, object]’</td></tr></tbody></table><h3 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h3><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>0</td></tr><tr><td>undefined</td><td>NaN</td></tr><tr><td>true</td><td>1</td></tr><tr><td>[1,2]</td><td>NaN</td></tr><tr><td>‘1a’</td><td>NaN</td></tr><tr><td>[]</td><td>0</td></tr><tr><td>{}</td><td>NaN</td></tr></tbody></table><h3 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h3><blockquote><p>js中的假值只有false、null、undefined、空字符、0和NaN，其它值转为布尔型都为true。</p></blockquote><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>null</td><td>false</td></tr><tr><td>undefined</td><td>false</td></tr><tr><td>true</td><td>true</td></tr><tr><td>[1,2]</td><td>true</td></tr><tr><td>‘1a’</td><td>true</td></tr><tr><td>‘’</td><td>false</td></tr><tr><td>[]</td><td>true</td></tr><tr><td>{}</td><td>true</td></tr></tbody></table><h3 id="关于浏览器对-的解析方式"><a href="#关于浏览器对-的解析方式" class="headerlink" title="关于浏览器对{}的解析方式"></a>关于浏览器对{}的解析方式</h3><blockquote><p>{} + [] == 0 // true</p></blockquote><p>当{}的前面有运算符号的时候，+，-，*，/,()等等，{}都会被解析成对象字面量，这无可争议。<br>当{}前面没有运算符时候但有;结尾的时候，或者浏览器的自动分号插入机制给{}后面插入分号(;)时候，此时{}都会被解析成代码块。<br>如果{}前面什么运算符都没有，{}后面也没有分号(;)结尾，Firefox和chrome会解析为代码块，也就是不会参与计算。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>默认处理顺序： 先valueOf，如果不返回基本类型，就执行toString</p><ul><li>当对象类型需要被转为原始类型时，它会先查找对象的valueOf方法，如果valueOf方法返回原始类型的值，则ToPrimitive的结果就是这个值.</li><li>如果valueOf不存在或者valueOf方法返回的不是原始类型的值，就会尝试调用对象的toString方法，也就是会遵循对象的ToString规则，然后使用toString的返回值作为ToPrimitive的结果。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本片markdown将会对JS的基础知识以题目的形式做一遍详细梳理，按时间顺序进行记录，内容较多，敬请慢慢食用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;2020-03-15&quot;&gt;&lt;a href=&quot;#2020-03-15&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://hellojackhui.github.io/2020/03/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-03-15T14:23:10.607Z</published>
    <updated>2020-03-16T01:08:41.326Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>通俗来讲，防抖就是每次触发事件时，会打断前一次事件处理，并重新执行。例如：我们需要延时发送请求，当重新触发事件时，会重置延时。</p></blockquote><p>具体实现：主要需要注意的就是触发时，需要重置settimeout操作，而后重新计时。并且需要考虑是否立刻执行的leading参数的执行时机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: ctx,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: true,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.leading) &#123;</span><br><span class="line">      <span class="keyword">let</span> immediate = !timer;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;wait)</span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(options.ctx, args);</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>节流实现的是当前一个发出延时操作时，后一个操作如果在这个延时时间内，就不执行。我们需要考虑的就是如何判定这个延时时间。</p></blockquote><p>具体实现：</p><ul><li><ol><li>需要计算在什么条件下可以执行该函数。</li></ol></li><li><ol start="2"><li>需要考虑立刻触发的leading和最后一次执行tailing参数的执行时机。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait = <span class="number">17</span>, options = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  ctx: context,</span></span></span><br><span class="line"><span class="function"><span class="params">  leading: false,</span></span></span><br><span class="line"><span class="function"><span class="params">  tailing: true</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>).getTime();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">later</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    prev = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    fn.apply(options.ctx, args);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="comment">// 如果不立刻执行，需要调整prev的时间线</span></span><br><span class="line">    <span class="keyword">if</span> (!timer &amp;&amp; !options.leading) &#123;</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> remain = wait - (now - prev);</span><br><span class="line">    <span class="keyword">if</span> (remain &lt; <span class="number">0</span> || remain &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      fn.apply(options.ctx, args);</span><br><span class="line">      prev = now;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.tailing != <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果最后想执行的话，需要在剩余的时间后执行函数</span></span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        later()</span><br><span class="line">      &#125;, remain)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;防抖和节流是js基础中比较重要的两个应用函数，主要是实现对短时间多次触发事件的不同处理机制。&lt;/p&gt;&lt;h2 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;通俗来讲，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hellojackhui.github.io/2020/03/15/hello-world/"/>
    <id>http://hellojackhui.github.io/2020/03/15/hello-world/</id>
    <published>2020-03-14T16:28:05.046Z</published>
    <updated>2020-03-14T16:28:05.046Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
